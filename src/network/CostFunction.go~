package network

import(
		//."fmt"
		"time"
		//.".././channels"
)

const N_ELEVATORS int = 3


func MakeLists( IPchan chan string,IPlistChan chan [N_ELEVATORS]string, ReceiveStruct chan NetworkInterface,StructListChan chan [N_ELEVATORS]NetworkInterface){
	var IPlist [N_ELEVATORS]string
	var StructList [N_ELEVATORS]NetworkInterface
	for i:=0;i<len(IPlist);i++{
		IPlist[i] = "nil"
	}
	var IPtimer [N_ELEVATORS]int64 //Timer 
	for i:=0;i<len(IPtimer);i++{
		IPtimer[i] = 0
	}			
	IPtimerCheck := IPtimer

	for{
		allreadyadded := false

		Struct := <- ReceiveStruct
		IP := <- IPchan
		
		for i := 0; i < len(IPlist); i++{ // Increase timer every time elevator sends a struct.
			if IPlist[i] == IP{
				allreadyadded = true
				StructList[i] = Struct
				IPtimer[i] = time.Now().Add(time.Second*2).UnixNano()/int64(time.Millisecond)
			}
		}

		
		for i := 0; i < len(IPtimer); i++{ // Removes IP from list if connection is lost.
			if IPlist[i] != "nil"{
				IPtimerCheck[i] = time.Now().UnixNano()/int64(time.Millisecond)
				if IPtimer[i] < IPtimerCheck[i] && IPlist[i] != "nil"{
					IPlist[i] = "nil"
				}
			}	
		}

		if allreadyadded == false{	
			for i:=0;i<len(IPlist); i++{
				if IPlist[i] == "nil"{
					IPlist[i] = IP
					StructList[i] = Struct
					IPtimer[i] = time.Now().Add(time.Second*2).UnixNano()/int64(time.Millisecond)
					break
				}
			}
		}

		StructListChan <- StructList
		IPlistChan <- IPlist
		
	}

}

func CostFunction(IPlistChan chan [N_ELEVATORS]string, StructListChan chan [N_ELEVATORS]NetworkInterface, MyIP string,ExecuteListChan chan []int,DirectionChan chan int,GlobalExternalOrdersChannel chan [4][2]int){
	var GlobalExternalOrders [4][2]int
	nextDirection := 0
	for{

		Structlist :=<- StructListChan
		IPlist :=<- IPlistChan

		for i := 0; i < len(IPlist); i++{ // Make a list of all external orders in the system.
			if IPlist[i] != "nil"{
				for j := 0; j < 4; j++{
					for k := 0; k < 2; k++{
						if Structlist[i].UpdatedGlobalExternalOrders[j][k] == 0{
							GlobalExternalOrders[j][k] = 0

						}					
						if Structlist[i].NewExternalOrders[j][k] == 1{
							GlobalExternalOrders[j][k] = 1

						}
 
 							
					}
				}

			}
		}



		
// What every elevator should do.
//---------------------------------------------------------------------------------------------------		

		for i:= 0; i<len(IPlist);i++{
			if IPlist[i] == MyIP{ // For loop only active for me.

				MyStruct := Structlist[i]
				floor := MyStruct.Floor
				internal := MyStruct.NewInternalOrders
				lastStop := MyStruct.LastStop
				closestUp := 100
				closestDown := 100
				closest := 100
				internalUp := false
				internalDown := false
				better := false


// Managing cost of internal orders.
//---------------------------------------------------------------------------------------------------

				for j:= 0;j<len(internal); j++{
					if internal[j] == 1{

						if floor > j{
							if (floor-j < closestDown){ // Least cost down.
								closestDown = j
								closest = closestDown
							}
						}
						if floor < j{
							if (j-floor < closestUp){ // Least cost up.
								closestUp = j
								closest = closestUp
							}
						}	
					}
				}

				if floor > lastStop{
					closest = closestUp
					if closestUp == 100{
						closest = closestDown
					}
				}else if floor < lastStop{
					closest = closestDown
					if closestDown == 100{
						closest = closestUp
					}
				}else if floor == lastStop{
					if closestUp == 100{
						closest = closestDown
					}else if closestDown == 100{
						closest = closestUp
					}
				}
				if floor == 0{
					closest = closestUp
				}else if floor == 3{
					closest = closestDown
				}


				if closestUp == closest && closest != 100{
					internalUp = true
				}else if closestDown == closest && closest != 100{
					internalDown = true
				}

// Managing cost of external orders.
//---------------------------------------------------------------------------------------------------

				for j:=0;j<4;j++{
					if GlobalExternalOrders[j][0] == 1 && internalDown == false{ //Up
						for elevators := 0; elevators < len(IPlist); elevators++ {
							if IPlist[elevators] != "nil" && IPlist[elevators] != MyIP{
								//Println(IPlist[elevators])
								YourStruct := Structlist[elevators]
								YourFloor := YourStruct.Floor
								//YourInternal := YourStruct.NewInternalOrders
								//YourLastStop := YourStruct.LastStop
								if YourFloor == j{
									better = true
									break
								}
								if (YourFloor-j) < closestUp{
									better = true
									break
								}
							}
						}

						if (j-floor) < closestUp-floor && better == false{
							
							closestUp = j
							internal[j] = 1		
						}				
					}
					
					if GlobalExternalOrders[j][1] == 1 && internalUp == false{ //Down
						if closestDown != 100{
							if floor-j < floor-closestDown{
								closestDown = j
								internal[j] = 1
							}
						}else{
							closestDown = j
							internal[j] = 1
							
						}	
					} 
				}

// Choose direction
//---------------------------------------------------------------------------------------------------	
				if internalUp == internalDown && floor < lastStop{	
					closest = closestDown
				}else if internalUp == internalDown && floor > lastStop{
					closest = closestUp
				}
				if closestUp == closestDown{
					closest = closestDown
				}else if (closestUp - floor < floor - closestDown) && closestUp != 100 && closestDown != 100{
					closest = closestUp
				}else{
					closest = closestDown
				}



				if closestUp > 4{ // If no order up.
					closest = closestDown
				}else if closestDown > 4{ // If no order down.
					closest = closestUp
				}	

				if closest < 4 && closest >= 0{
					if closest < lastStop || floor == 3{
						nextDirection = -1
					}
					if closest > lastStop || floor == 0{
						nextDirection = 1
					}
				}else{
					nextDirection = 0
				}
				//Println("closest")
				//Println(closest)
				//Println(nextDirection)
				GlobalExternalOrdersChannel <- GlobalExternalOrders	
				DirectionChan <- nextDirection
				ExecuteListChan <- internal[0:]
									
			}
		}
		time.Sleep(10*time.Millisecond) 

	}
}

func contains(s []int, e int) bool {
    for _, a := range s { if a == e { return true } }
    return false
}

func containsPosition(s []int, e int) int {
    for i:= 0; i< len(s); i++{
    	if s[i] == e{
    		return i
    	}
    }
    return -1
}


func DistributeOrders(ReceiveStruct chan NetworkInterface, IPchan chan string, ExecuteListChan chan []int, IPlistChan chan [N_ELEVATORS]string, MyIP string,DirectionChan chan int,GlobalExternalOrdersChannel chan [4][2]int){
	go MakeLists(IPchan, IPlistChan, ReceiveStruct,StructListChan)
	go CostFunction(IPlistChan,StructListChan,MyIP,ExecuteListChan,DirectionChan,GlobalExternalOrdersChannel)

}
